{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"The Old DevRel Playbook","text":"<p>Updated: 2025-04-29</p> <p>Twilio was one of the first companies to focus on developer relations as the foundation of its go-to-market strategy. </p> <p>When I joined Twilio's Developer Evangelism team in 2014, our devrel playbook was built on: </p> <ul> <li>Magical developer experience. Signup for an account and send your first SMS with five lines of code within five minutes. </li> <li>Great docs. Copy-pastable code to support devs on their journey from quickstart, to production, to scale. </li> <li>Technical content to generate awareness and drive signups via organic and developer-social channels. </li> <li>\"Be everywhere and be awesome.\" IRL events. Speak at, sponsor, and host hundreds of meetups, conferences, hackathons every year. </li> </ul> <p>The devrel playbook from 2014 doesn't work anymore. </p> <p>AI is changing how developers write code, which changes how devtool companies reach and serve developers. </p> <p>Since leaving Twilio in 2023, I've been building with AI and advising AI companies on devrel. This site is my attempt to sketch out a playbook for effective devrel in the age of AI. </p> <p>Right now I have a lot more questions than answers. </p>"},{"location":"#developer-relations-in-the-age-of-ai","title":"Developer Relations in the Age of AI","text":""},{"location":"#developer-experience","title":"Developer Experience","text":"<ul> <li> <p>What does a magical developer experience look like with AI assistance? For example, could a developer signup for your product and get to hello world without leaving the IDE? </p> </li> <li> <p>Few things frustrate a developer more than copy-pasting code that doesn't work. At Twilio we meticulously made sure all the code on the docs and blog worked. LLMs produce, almost by definition, \"average code.\" How can you improve the odds that code suggested by LLMs for your product actually works the first time? </p> </li> <li> <p>LLMs are trained on outdated versions of your docs and SDKs. There\u2019s a ~12 month gap between the knowledge cutoff and the model shipping. There will always be more outdated code in the training data than up-to-date examples. How do you think about backwards compatibility and versioning? </p> </li> <li> <p>Developers are leaving the IDE less than they used to. What tasks do developers currently accomplish by visiting your console that they could solve in the IDE via an agent? (eg, change a webhook? generate a new API key and save it to .env?)</p> </li> <li> <p>What capabilities unlock if a developer installs your MCP server into their IDE? </p> </li> <li> <p>Will MCP servers become the primary way a developer interfaces with your product? </p> </li> <li> <p>How do you help developers help LLMs to use your product? Prompts on your docs? .cursorrules and CLAUDE.md files in your repos? </p> </li> <li> <p>We used to assume that if we had the best DX and the best docs, once a developer integrated with Twilio we would be super sticky. Customers would be willing to pay a premium on usage because developer hours was their scarcest resource, so vendor swapping would be too costly. How much vendor lock-in is there if a refactor is a cmd-k away? </p> </li> <li> <p>What does it mean that Cursor -- a devtool company -- is one of the fastest companies ever to $100M ARR, and has no formal marketing / devrel? </p> </li> </ul>"},{"location":"#docs","title":"Docs","text":"<ul> <li> <p>Should your docs be primarily markdown-based? </p> </li> <li> <p>How do you structure docs to optimize for RAG over docs in the IDE? </p> </li> <li> <p>Is it a failure case to have a developer look at documentation at all?</p> </li> </ul>"},{"location":"#developer-content","title":"Developer Content","text":"<p>At Twilio, we wrote different content to target Organic traffic vs. Social traffic. A post called \"How to Send SMS with Python\" performs well in Google, whereas \"How I taught my dog to text selfies\" performs well on Hacker News. The former drives signups, the latter drives awareness. </p> <p>I conceptualize this split as \"content a developer reads to solve a specific problem when they have an IDE open\" and \"content a developer reads on the toilet.\" </p> <ul> <li> <p>Re: \"content a developer reads with an IDE open.\" Developers increasingly solve those problems with AI assistance, inside the IDE. Is there still value in shipping the \"how to send sms in ruby\" blog post? </p> </li> <li> <p>For sake of argument: \"search is dead, de-prioritize the blog,\" BUT you still need content to get indexed in the training data. The more content in the training data, the more likely the LLM is to suggest your tool. (Is this actually true, or does RLHF and fine-tuning counteract this?) </p> </li> <li> <p>If it is true, are you incentivized to fill the internet with LLM generated slop to feed the training data? Feels like SEO backlink spam in 2002. How do model providers curate training data to avoid this race to the bottom? </p> </li> <li> <p>o4-mini was launched in April 2025 and it\u2019s knowledge cutoff is June 2025. That\u2019s a long feedback cycle to find out if your strategy to get content into the training data is working. </p> </li> <li> <p>Will there be a Google AdWords equivalent for LLMs where companies pay for preferential treatment? Will OpenAI charge you to be a \"verified source\" of training data, so that, eg, Twilio is recommended first when a developer asks how to send an sms in ruby? </p> </li> <li> <p>Is your blog still the right place to publish code? Should your content portfolio prioritize high-quality public GitHub repos? </p> </li> <li> <p>Do humans still need copy-pastable code from your blog if the LLM is their first stop to solve code problems? Should you spend your time instead writing high-level content: systems and architecture guidance rather than implementation details?</p> </li> <li> <p>Do you now bifurcate your content strategy to \"for humans\" and \"for agents\"? </p> </li> <li> <p>If search is dead, where do developers now discover new tools? </p> </li> <li> <p>Does YouTube become a more tool important for developer acquisition and engagement? Higher bar to ship content means less slop. Actually connecting with a human. </p> </li> </ul>"},{"location":"#developer-events","title":"Developer Events","text":"<p>Perhaps less AI specific, but the devrel ground game changed a lot during the pandemic and post-ZIRP. </p> <ul> <li> <p>How are T&amp;E and sponsorship budgets looking in 2025? </p> </li> <li> <p>AI caused a resurgence of developer events, especially in SF. What are the most successful formats? </p> </li> <li> <p>Are hackathons more or less powerful in the era of vibecoding? </p> </li> <li> <p>How do you justify the benefits of IRL events that don't show up on a spreadsheet? Why get on a plane to give a talk in a breakout room to a few dozen developers, or drop a $10,000 on a sponsorship to scan a hundred badges at the booth, when you can ship a YouTube video that gets watched by X0,000 viewers with a smaller investment? </p> </li> </ul>"},{"location":"#developer-demographics","title":"Developer Demographics","text":"<p>\"A developer is someone who solves problems with code.\" - Ricky Robinett</p> <ul> <li> <p>A whole bunch of people who do not identify as a \"developer\" are now solving problems with code, thanks to vibe coding. Are you trying to reach, eg, the nurse that builds a schedule notification system for her floor? Should you? </p> </li> <li> <p>70% of Mr. Beast's viewers don't speak English. English has been the dominant language for technical documentation. How does inexpensive translation impact the growth of global developer populations? Should every devtool product now be global by default? Why don't you have docs in Portuguese? </p> </li> <li> <p>22 year old junior devs are more likely to be AI-native. They consume content via YouTube and TikTok. 40 year old senior devs are more AI-skeptical and consume longform text based content.  </p> </li> </ul>"},{"location":"#acknowledgments","title":"Acknowledgments","text":"<p>This is an ongoing project by Greg Baugues. The questions and thoughts here were cultivated through conversations with many friends, especially: Ricky Robinett, Andrew Baker, Matt Makai, Rob Spectre, Tilde Thurium. </p> <p>If you want to chat about this stuff, drop me an email at greg@baugues.com. </p>"},{"location":"devex/","title":"Level Setting","text":"<p>what does a magical developer experience look like? </p> <p>examples:  * twilio * stripe * openai  * cursor * assemblyAI </p>"},{"location":"devex/#developer-experience","title":"Developer Experience","text":"<ul> <li> <p>What does a magical developer experience look like with AI assistance? For example, could a developer signup for your product and get to hello world without leaving the IDE?</p> </li> <li> <p>Developers are leaving the IDE less than they used to. What tasks do developers currently accomplish by visiting your console that they could solve in the IDE via an agent? (eg, change a webhook? generate a new API key and save it to .env?)</p> </li> <li> <p>How do you help developers help LLMs to use your product? Prompts on your docs? .cursorrules and CLAUDE.md files in your repos? </p> </li> </ul>"},{"location":"devex/#mcp","title":"MCP","text":"<ul> <li> <p>What's unlocked if a developer installs your MCP server into their IDE? For instance, can you ensure they\u2019re always using your up to date docs?</p> </li> <li> <p>Will MCP servers become the primary way a developer interfaces with your product?</p> </li> </ul>"},{"location":"devex/#training-data-suggestions","title":"Training Data / Suggestions","text":"<ul> <li> <p>Few things frustrate a developer more than copy-pasting code that doesn't work. At Twilio we meticulously made sure all the code on the docs and blog worked. LLMs produce, almost by definition, \"average code.\" How can you improve the odds that code suggested by LLMs for your product actually works the first time?</p> </li> <li> <p>LLMs are trained on outdated versions of your docs and SDKs. Their knowledge cutoff is 12+ months in the past. There will always be more outdated code in the training data than up-to-date examples. How do you think about backwards compatibility and versioning?</p> </li> <li> <p>We used to assume that if we had the best DX and the best docs, once a developer integrated with Twilio we would be super sticky. Customers would be willing to pay a premium on usage because developer hours was their scarcest resource, so vendor swapping would be too costly. How much vendor lock-in is there if a refactor is a cmd-k away?</p> </li> </ul>"},{"location":"about/","title":"About DevRel.ai","text":"<p>Hi! I'm Greg Baugues. </p> <p>I worked on Twilio's Developer Relations teams from 2014-2023. </p> <p>Since leaving, I've been building with AI and advising AI companies on developer relations. </p>"},{"location":"content/content/","title":"Old School Playbook","text":"<p>At Twilio, we wrote different content to target Organic traffic vs. Social traffic. A post called \"How to Send SMS with Python\" performs well in Google, whereas \"How I taught my dog to text selfies\" performs well on Hacker News. The former drives signups, the latter drives awareness. </p> <p>I conceptualize this split as \"content a developer reads to solve a specific problem when they have an IDE open\" and \"content a developer reads on the toilet.\" </p>"},{"location":"content/content/#organic","title":"Organic","text":""},{"location":"content/content/#developer-social","title":"Developer Social","text":"<p>Here's how I thought about it. </p> <p>Write technical blog posts. </p> <p>Why are you writing?  - Awareness - Signups </p> <p>Developer Social </p>"},{"location":"docs/","title":"AI Native Docs","text":"<p>Updated: 2025-05-07</p> <p>This article is based off an interview with Andrew Baker and Ricky Robinett. </p> <p>In 2025, the most important audience for your docs is developers' IDE and their coding agents, not developers themselves.</p> <p>The old way of building software was about: \"how can I understand a new API or library that I'm incorporating into my product?\"</p> <p>Building with AI is about: \"how much am I going to have to slow down and leave my IDE to incorporate a new vendor or API?\"</p> <p>Your goal is to help a developer finish building their thing as fast as possible. </p> <p>The best AI-native developer education workflow is one where: 1. you provide their agent with accurate information about building with your product 2. the agent applies your context to the developer's problem 3. the agent writes code that solves the developer's problem on the first try. </p> <p>How do you pull your docs into your coding IDE so that an agent can slurp up all the information that humans won't bother to read? </p> <p>There are primarily two ways that developers can consume your docs from their IDE/agent: </p> <ol> <li> <p>Your code is included in the model's training data. </p> </li> <li> <p>Your docs are inserted into context at time of request, either by:  </p> <ul> <li>The developer copy-pastes directly into context</li> <li>The agent fetches the docs via URL</li> <li>The IDE imports and embeds the docs and performs RAG </li> </ul> </li> </ol>"},{"location":"docs/#getting-in-the-training-data","title":"Getting in the training data","text":""},{"location":"docs/#realtime-doc-retrieval","title":"Realtime Doc Retrieval","text":"<p>Stripe's MCP server has tools built in to fetch the latest docs in to the IDE. It can access the most up to date information about how your API works in a way where Claude, Gemini, and ChatGPT might not know if your API has changed in like the past 6-12 months. </p> <p>when using tools like Stripe MCP server. Even then, hallucinations are an issue. Do we have any idea about best practices to ensure the \"proper\" way of doing things is represented in the training data?</p> <p>MCP servers seems really useful if you are a API purveyor -- a vendor approved, first-party, up-to-date component in a developer's stack that's not just your SDK, but a tool that can help a developer across all phases and needs that a developer has when building with your product. </p> <p>Stripe's MCP server has tools built in to fetch the latest docs in to the IDE. It can access the most up to date information about how your API works in a way where Claude, Gemini, and ChatGPT might not know if your API has changed in like the past 6-12 months. </p>"},{"location":"docs/#writing-ai-native-docs","title":"Writing AI Native Docs","text":"<p>Focus on generating your docs from the \"source of truth\" \u2014 keep code and doc context together, especially when you have a small codebase and can fit more in the context window that LLMs allow.</p> <p>Implement a deterministic automated pipeline to generate OpenAPI docs. Keep everything up-to-date, flat, and automatically available so an LLM or developer can consume it without your supervision. </p> <p>Implement feedback mechanisms. </p>"},{"location":"docs/dashboards/","title":"Dashboards","text":"<p>High-friction signup experiences are more frustrating than they used to be. </p> <p>Developers don't want to get to know your dashboard and console. They want to get an API key so that their coding agent can finish implementing the thing that it already got started on.</p> <p>I'm not eloquent about this, but it feels like we've always valued dashboards as visual, but actually, dashboards can be obstacles\u2014I'd rather have a conversation with my data, enabled by MCP and observability integrations.</p>"},{"location":"docs/dashboards/#andrew-baker","title":"Andrew Baker","text":"<p>Yes, exactly. Even at Twilio, while we prioritized great documentation, we didn't put as much emphasis on customer dashboards, and that eventually caused trouble for us. Nobody enjoys maintaining or navigating a weird UI, so dashboards are ripe for rethink.</p>"},{"location":"docs/dashboards/#greg-baugues","title":"Greg Baugues","text":"<p>So, the goal at Twilio wasn't \"great docs\" but \"great developer experience.\" Docs were integral, but now agentic-first tooling matters more\u2014it may not look like pretty docs or dashboards, but more like a single Markdown file or easily-executed curl commands. Helping the developer do what they want as quickly as possible may not involve visiting your website at all.</p>"},{"location":"docs/feedback/","title":"How to continuously improve your docs","text":"<p>Kat King led Twilio's Documentation efforts for a couple years. </p> <p>She gave a talk at Write the Docs conference back in the day.</p> <p></p> <p>In Devrel people want to talk about the org chart a lot \u2014 even R&amp;D people do too, everyone loves to talk about corporate org charts. When you treat documentation as an extension of the product and it's basically a cost center within your R&amp;D organization, you sort of consider it a box you have to check on your way to releasing a product or a feature. The engineering work never gets done on time, and docs become an afterthought and the part of the work that's going to get compressed the most. </p> <p>If you staff it out with technical writers, they may do a great job on the information architecture and prose, but they aren't necessarily going to be able to understand all the sample code that's handed to them, or how it relates to all the other pieces of sample code in that documentation. So docs become a little bit of a black box process that's kind of an afterthought and gets compressed when you treat it as an R&amp;D product extension. </p> <p>The way we did it at Twilio \u2014 and the way I think most companies who have excellent docs have treated it \u2014 is saying \"this is part of our way of growing our business and our customer base. It's an essential component of our customer journey.\" </p> <p>These days people will use the term \"Developer PLG\" most often to describe this. Most of the time we just called it self service, if we called it anything. At Twilio for so long, we didn't really have any other way to sell our APIs, so it was just like air to us. We didn't describe this funnel any other way. </p> <p>But when you do it that way, like any marketing or sales or support team, you are thinking about: my job is to make this user, this developer, successful. I need to go and understand what problems they're hitting along the way with their journey and really take the time to think about what are the ways that I can minimize the odds that they're going to go off on a path that's a dead end. </p> <p>For example: </p> <ul> <li>What are the ways I can minimize the odds that they copy and paste a piece of sample code that's never going to work just based on their development environment? </li> <li>How does their new account have slightly different defaults than the accounts that employees use when they're writing the documentation? </li> </ul> <p>When you approach it with that philosophy, you realize you need to create feedback loops to understand how the docs are working and not working for customers. When Kat was leading the team was when we implemented the single best feedback loop we ever had back in the day: a five-star rating widget at the top and bottom of every page in the docs. </p> <p>A developer could drop in a five-star rating for that doc, and if it was anything less than five stars, we would ask them to leave a comment and assure them as best we could in the UI that it was not going to be a black hole that that comment went into. </p> <p>Instead, the rating and feedback went directly to a Slack channel that everyone on our team and inside the company could see. So when there was something wrong with the docs, you would get that steady little drip every day telling you whether there's a problem or not. Not every visitor to the docs is going to take the time to fill out the five-star widget \u2014 indeed, very few people took the time. But that ended up making for a pretty manageable drip of feedback in that Slack channel, where you actually could, as a human being reading it, pluck out the patterns and figure out what items we need to investigate further. </p> <p>We had it wired up so that if you were logged into your Twilio console at the time, we knew your account ID when you left that feedback. If we thought there was something specific going on for your account, we could actually look up your email address in our internal dashboard and reach out to you and say, hey, I saw you're having trouble with the docs. How can I help?</p> <p>Let me pitch my fever dream workflow. I was thinking about how crucial feedback loops were for us\u2014the best signal we had for making our docs and APIs better. If you could convince a developer to add your MCP server to their IDE as they integrate your API, the agent could retrieve the latest docs, and you could even add a feedback tool to collect anonymous feedback on whether the docs solved their problem. This sort of telemetry isn't a stretch and would be interesting to experiment with.</p>"},{"location":"docs/feedback/#ricky-robinett","title":"Ricky Robinett","text":"<p>Great idea, Baker. I've been toying with removing the human from some testing. For example, using Claude code (or another tool) to consume a tutorial and run through it, critiquing it\u2014not just testing code samples, but the whole experience. It's a step beyond what we did at Twilio, and while my tool isn't fully ready yet, the idea of self-critiquing docs and tutorials with LLMs is promising.</p>"},{"location":"docs/feedback/#andrew-baker","title":"Andrew Baker","text":"<p>I agree\u2014it was one of the most painful aspects of maintenance for us. If you could point an LLM at a URL with access to code tools, and it could run and critique examples, that would have been huge for us. We'd have gladly paid to have that run on every page every day.</p>"},{"location":"docs/large-orgs/","title":"How to maintain docs for large orgs","text":"<p>Twilio had an interesting documentation challenge. The company became known and successful for its first two original products - the SMS API and voice API. These were what most customers wanted to build with.</p> <p>We needed to keep those front and center. However, as the company grew and expanded its target markets, the product portfolio also expanded.</p> <p>What started as just two icons on the website (one with a little text message and one with a little phone call) suddenly became 20 icons. Not all these products had the same level of depth and complexity.</p> <p>Beyond SMS and voice, not all products would be relevant to the average developer who visited our site.</p> <p>Creating excellent documentation was already challenging with just two core APIs. The problem became much harder once the company started growing and adding more products.</p> <p>I remember realizing that no single developer who visited our site would ever use all of these products. This was a big shift in how we helped developers find the information they needed without getting distracted or overwhelmed.</p> <p>The most interesting aspect was how our approach changed over the years. When Twilio first built the developer education team, there were only three of us, while the rest of Twilio had about 550 employees.</p> <p>In the beginning, we recognized we would never be able to write all the docs that Twilio needed, especially considering the granular nuances of specific API endpoints, operations, and edge cases.</p> <p>With the expanding product portfolio, multiple programming languages, and different types of documentation, the scope was too much for three people.</p> <p>We focused on creating tools internally that allowed our colleagues in product and engineering to contribute to the docs easily. This worked well for the first few years.</p> <p>Twilio still had many product and engineering folks from the earlier era who expected to contribute to documentation. They knew this was an important responsibility for both their success and the company's success.</p> <p>As the company grew larger, everyone's individual job scope narrowed. New hires might not have been expected to contribute to documentation before, and some expected to delegate it to technical writers.</p> <p>This created an internal challenge from a cultural and organizational perspective. We had these \"in-between years\" where some product managers and engineers still felt that original ethos and wanted to be hands-on with their docs.</p> <p>Meanwhile, other product teams had zero interest and expected us to do all the work for them. This made it difficult to staff the team and determine what types of tools to build.</p> <p>By the time I left the company at the 5,000+ employee scale, few product teams were deeply involved in their docs. We focused on being great stewards of the documentation ourselves.</p> <p>This involved creating excellent internal tooling for the professionals involved with the docs, as well as tools for auto-generating as much of the documentation as possible. There was still plenty of interesting engineering work in this approach.</p>"},{"location":"docs/mcp/","title":"MCP and developer docs","text":"<p>MCP servers seems really useful if you are a API purveyor -- a vendor approved, first-party, up-to-date component in a developer's stack that's not just your SDK, but a tool that can help a developer across all phases and needs that a developer has when building with your product. </p> <p>Stripe's MCP server has tools built in to fetch the latest docs in to the IDE. It can access the most up to date information about how your API works in a way where Claude, Gemini, and ChatGPT might not know if your API has changed in like the past 6-12 months. </p> <p>After that, focus on MCP servers. The most interesting ones plug gaps across the workflow that aren't just about writing code: </p> <p>For example: </p> <ul> <li>Neon (serverless Postgres) MCP server lets my agent run queries against production data for debugging</li> <li>Sentry's lets me investigate related errors</li> </ul> <p>If you offer your own MCP server to let developers manage your product (e.g., webhooks) programmatically, that's powerful. No one's quite providing an MCP server that works across the whole lifecycle yet.</p> <p>I wouldn't prioritize building elaborate user consoles. My signup would be quick: Email, password, API key, and instructions for plugging in the MCP server. If you want to look at the docs, you can\u2014but I'd build docs more for developer tools/agents than for direct human consumption.</p>"},{"location":"docs/measurement/","title":"Measurement","text":"<p>Back then, it was literally impossible for any user to become a Twilio customer without using the docs.</p> <p>That was the more important metric I would highlight internally: not traffic or pageviews, but that 100% of revenue started with the docs. </p> <p>The docs played a critical role in attracting traffic to our site, even before someone decided to try building with our product. We could honestly say that every customer needed this resource to work well for them to succeed.</p>"},{"location":"docs/scraps/","title":"Scraps","text":"<p>There is some artistry and a lot of thoughtfulness that can go into great documentation which really like conveys understanding for your audience in a way that I think, you know, can help them learn ancillary skills along the way.</p> <p>How many times have we seen a developer's first API that they ever use be the Twilio API? We weren't just teaching them how to send a text message, we were teaching them how to make an API call and what it means to put an API key into your environment and things like that.</p> <p>The empowering aspect of human consumed documentation is something I hope can get preserved somehow. But in terms of parsing through a dozen pages on some new website that I've never used before to understand what I need to do to make the right API call with the right parameters and what the response value is going to be that comes back, that was tedious, slow work.</p>"},{"location":"docs/training-data/","title":"Training data","text":"<p>Let me tie that to something else we've put effort into. We've spent a lot of time on robust templates and full sample applications, but it often felt like they didn't have the impact we expected. For the longest time, most people didn't seem to use them, though now I see developers wanting templates that get them most of the way there so their assistant can finish up. Do you think templates will have a resurgence?</p> <p>Baker: </p> <p>Me: </p> <p>There's an interesting dichotomy: Developers can consume your docs via LLM autocomplete (from training data that's maybe a year old and possibly not heavily weighted for official docs), or via retrieval-augmented generation (RAG) when using tools like Stripe MCP server. Even then, hallucinations are an issue. Do we have any idea about best practices to ensure the \"proper\" way of doing things is represented in the training data?</p> <p>Ricky: </p> <p>Quick Cloudflare answer, then back to Andrew. Our philosophy is to try everything\u2014because if you miss one training window, you could lose 12\u201318 months. So lots of samples, LLMs.txt and Markdown for copying docs for LLM consumption. I haven't seen RAG work well yet; it's more manual than it should be. Dropping a docs link for automatic crawling hasn't been a silver bullet either.</p> <p>Baker:</p> <p>It depends, and maybe we're seeing two sides of the same coin. If you're an incumbent brand or API with stable, backward-compatible changes, you have less to worry about\u2014LLMs know about you already. If you're a new startup, you have to find ways to get up-to-date context into the dev's environment.</p> <p>I found a project called Context 7 run by the folks at Upstash. You can paste in a GitHub repo, it'll process all the docs in that repo and provide a consolidated, LLM-friendly version (including LLMs.txt), even if the project hasn't adopted the convention. I added a repo recently; it processed it and gave me the link I needed\u2014an easy way to pull docs into the development environment. I'll use it again.</p> <p>Me: </p> <p>As a developer, I feel a dichotomy: If I'm using a standard, stable library, autocomplete works great. But with new stuff\u2014especially with AI agents\u2014there's a gap when LLMs don't know how to use it. Your distinction between incumbents and startups is really crucial, because they have fundamentally different problems.</p> <p>Ricky: </p> <p>In the early days, the best measure that our docs were working was that a Google search for \"send SMS with PHP\" returned our pages as the top results. Now, you want to ask ChatGPT and expect working, copy-pastable code. You want to be the first answer and have working code.</p>"},{"location":"docs/twilio/","title":"Developer Documentation at Twilio","text":"<p>This is based on a conversation from Andrew Baker, who led the Developer Education Team at Twilio prior to serving as Twilio's VP of Developer Relations. </p> <p>Twilio had a reputation for great docs even before we had a dedicated Developer Education team. </p> <p>That's because there was just such a \u2014 what I describe these days as a religious leap of faith on the core hypothesis of the company: you can build a company around an API as your product and a developer as your customer. </p> <p>When the company was really small, that meant that every engineer, and every product manager at Twilio was contributing to the documentation and saw it as a critical, necessary part of that leap of faith that underpinned the whole company. </p> <p>As the company grew, we had the opportunity to create a dedicated docs team dive headfirst into this \"documentation as a product\" mentality. </p> <p>But back then there wasn't really a lot of prior art on how you would do that. </p> <p>We had to start at first principles in terms of figuring out, as engineers: </p> <ul> <li>What do we think are the best docs experiences we've encountered? </li> <li>What do we think are the best libraries and open source tools we can draw inspiration from? </li> <li>How can we figure out the right balance between helping a developer who's brand new get to that magical moment of lighting up their own device with code they wrote themselves, even if they copied and pasted most of it from the website? </li> <li>How can we nail that first experience in as few minutes on the clock as possible, while still showing them enough of the rest of the complexity of the product so that they can say, \"Oh yeah, I will be able to build the rest of my use case that I have in mind. I know where I'll have to go to get the information I need to actually finish building my product and launch it.\" </li> </ul> <p>That's kind of the scope of what we considered ourselves responsible for on the Developer Education team \u2014 that moment between when a developer signs up to get their API key for the first time through that first five minutes with the product where we're hoping to give them that magical moment, all the way up to when they've scoped out, planned their project, finished building their Twilio implementation \u2014 weeks, maybe months later \u2014 and they're launching it live in production to their end users and seeing everything work correctly. </p> <p>We built out ancillary functions like training and other things on the Developer Education over the years, but documentation was always the single most important pillar in supporting developers on that journey. </p>"},{"location":"docs/twilio/#docs-for-large-companies-and-complex-products","title":"Docs for large companies and complex products","text":""},{"location":"docs/vibecoders/","title":"Vibecoders","text":"<p>We struggled for years to name that persona\u2014maybe \"builder\" is the best term. It refers to someone creating something from nothing, though they might not call themselves an engineer if you asked. </p> <p>Twilio's simplicity, plus its magical outcome, allowed us to meet lots of folks taking their first steps into software. They changed their view of their work, careers, and what's possible\u2014realizing they could create a product and share it overnight.</p> <p>The really interesting thing to watch is the different motivations those new \"builders\" might bring. Even just a few years ago, the conventional bootstrapper wisdom was: Find a small niche, keep things manageable, and marketable. Larger projects required outside funding, and that narrowed your available options, dictated by investor expectations. </p> <p>What excites me now is that it might be possible for one or a small group of people to ship a world-class, transformative technology product without capital that would have been necessary before. If you once needed 100 people, maybe now you can do it with 3, 5, or 10. With the right group, different motivations (not just maximizing investor returns) could drive hard work and innovation\u2014paying the bills but not just chasing VC scale. </p> <p>That's my off-kilter dream for what this moment means: A new way for small groups to build what was previously out of reach.</p>"},{"location":"docs/writing-docs/","title":"How to use AI to help write developer documentation","text":"<p>Our philosophy at Twilio was that the sample code on the page was the most important part, because code is the densest way to convey information \u2014 assuming it's in the right language for the user. That's why we prioritized language support so heavily. </p> <p>If you believe that the sample code is the most important part \u2014 and arguably even more so now \u2014 I would look for ways to get a first draft of the rest of the prose that's as grounded as possible in the truth. </p> <p>Of course, you wouldn't want LLMs to generate thousands of words without supervision, but having them draft is valuable, since prose is one of the most time-consuming aspects.</p> <p>I also wonder if you could go further: Point an LLM at the source of truth code, have it extract the endpoints and parameters, generate sample code, and then wrap a doc around it. </p> <p>The best thing we did at Twilio was to generate our API reference docs from the source of truth behind Twilio's APIs (before OpenAPI compliance was even a thing). That reduced our maintenance burden and increased quality. </p> <p>Today, generating API reference docs is routine if your API is compliant, but for us it was all internal tooling \u2014 we generated docs from the API's source of truth. It makes me wonder how much further you can go, having LLMs generate the public docs based on the real code.</p>"},{"location":"interviews/andrew-baker-on-docs/","title":"Andrew baker on docs","text":""},{"location":"interviews/andrew-baker-on-docs/#andrew-baker","title":"Andrew Baker","text":"<p>I led the Twilio developer education team for a while. I actually joined up as an individual contributor first.</p> <p>What drew me to the team in the first place was kind of the core ethos I would say Twilio was bringing to the space, which was: the best folks to create excellent documentation for developer customers are engineers themselves, not technical writers. That really attracted me because prior to that I started my career as a Python engineer in Washington, DC, mostly in the government consulting space.</p> <p>I actually got really lucky, got staffed on some really fun government clients, like the Consumer Financial Protection Bureau. Got to meet some cool technologists who rotated in through industry. That was a special experience in retrospect. But I was ready for a break and wanted to work for a product company next. </p> <p>Before I did that, I took a little time off to tinker with my own interests. That was when Docker was getting really hot for the first time, so I had the opportunity to lean into it. I built some Docker tutorials and workshops, ran them at meetups, started putting in talks at Python conferences. I'd already found my way as someone who was an engineer but just really enjoyed teaching other engineers.</p> <p>So I stumbled into this sort of role. I thought, oh, I guess I should go and try to find a job doing something like this. I got lucky that around the same time Twilio was starting this developer education team\u2014one of only a handful in the industry in 2015 supporting docs this way. Most companies were still, A) not treating the engineer as their customer persona, and B) running docs as a conventional extension of the product org and technical writing.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues","title":"Greg Baugues","text":"<p>What I think we can say objectively, with some humility, folks in the past used to say that Twilio had some of the best developer documentation around. What was it that was different about Twilio's docs versus what was more common for developer documentation back then?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_1","title":"Andrew Baker","text":"<p>Yeah, I think it's a great question to dissect because part of what drew me to Twilio \u2014 and I'd already used the API as a developer hobbyist \u2014 Twilio had a reputation for great docs even before we started this team. That's because there was just such a \"religious leap of faith\" on the core hypothesis: you can build a company around an API as your product and a developer as your customer.</p> <p>When the company was small and there wasn't a docs role, every engineer and product manager contributed to the docs and saw it as a critical part of that leap of faith underpinning the company. That gave us a head start. As the company grew, we got to create a team and really dive into documentation as a product mentality, which you hear people talk about a lot now, but back then there wasn't a lot of prior art. </p> <p>We had to start at first principles: for us as engineers, what were the best docs experiences we'd ever seen? Which open source tools or libraries inspired us? How could we figure out the right balance between helping a developer new to Twilio get to their first magical moment quickly, while showing them enough of the rest so they can finish building their use case?</p> <p>That's really what the developer education team was responsible for: that moment between sign-up for your first API key, through the first five minutes with the product (hoping to get a magical moment), all the way to planning and launching a Twilio implementation, weeks or months later. Documentation was always the single most important pillar for supporting developers.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett","title":"Ricky Robinett","text":"<p>Andrew, I'm going to ask a leading question. One of the things I observed was a meaningful shift in the team's success with Kat's work around empathy-driven documentation. Can you lay that out? For many developers, empathy-driven docs opened our eyes to how to talk to people who don't get it innately.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_2","title":"Andrew Baker","text":"<p>That's a really great point. Kat King's Talk is still online from Write the Docs\u2014it\u2019s an excellent piece of work I still link to. The mindset shift was crucial: in DevRel, people talk about org charts a lot. When you treat docs as a product extension and a cost center in R&amp;D, it\u2019s just a box to check on your way to releasing a product or feature.</p> <p>The engineering work never gets done on time, and docs get compressed. If you staff with writers, they may do great prose, but can't always understand all the sample code, and how it connects. It's a black box process that becomes an afterthought, compressed when docs are part of R&amp;D.</p> <p>At Twilio, and elsewhere with great docs, we treated it as an essential component of business and the customer journey. Today you\u2019d call it developer PLG (Product-Led Growth), but for us it was just self-service. Our job was to make the user (the developer) successful. We had to think about: what are the ways I can minimize the odds they go in a dead end? Or that they copy-paste code that won\u2019t work, or that their account defaults don\u2019t match an employee's?</p> <p>That meant creating feedback loops. When Kat led the team, we shipped a five-star rating widget on every page: if you left less than five stars, you could leave a comment, and it went straight to a Slack channel the whole company could see. Not every visitor left feedback, but the trickle was enough to spot real problems. If you were logged in, we could sometimes reach out to help.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_1","title":"Greg Baugues","text":"<p>Is there any way you can give us numbers to get an idea of scope? How many developers, how many products, or pages?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_3","title":"Andrew Baker","text":"<p>I don\u2019t have exact numbers anymore, but the unique thing was no user could become a customer without using the docs. Internally, we could say every customer needed the docs to work well.</p> <p>The docs themselves added complexity as the company grew. Twilio was known for SMS and voice, but then added more products. What started as two icons grew to twenty, with varying depth and relevance. The challenge got bigger as we expanded.</p> <p>I realized no user would use all the products. Our goal became: help developers get what they came for, without being overwhelmed by everything else.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_2","title":"Greg Baugues","text":"<p>Ricky just pulled it: over 7,000 pages on twilio.com docs today.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_1","title":"Ricky Robinett","text":"<p>According to Plush Cap, yeah.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_3","title":"Greg Baugues","text":"<p>Amazing. We support maybe 10 products across 6\u201312 languages, most with helper libraries. There\u2019s a ton to keep in sync, and for each one you\u2019re working with product teams. What were some people/org challenges just keeping things up to date?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_4","title":"Andrew Baker","text":"<p>We could spend an hour here. The most interesting part is how it changed. Early on, when starting the developer education team, there were only three of us, even though Twilio had 550 employees.</p> <p>We knew we couldn\u2019t write all the docs needed. The scope was too big for three people. So, we built tools so product and engineering could contribute. That worked while there was still a culture of contributing docs, but as we scaled, roles specialized. New hires didn\u2019t expect to write docs themselves\u2014many expected technical writers to do it.</p> <p>That created a cultural challenge. Some product managers wanted to be hands-on, others wanted us to do everything. That made it hard to know what tools to build: should we optimize for everyone, or just for the docs team?</p> <p>By the time I left, few product teams were hands-on at 5,000 employees. We were focusing more on being good stewards ourselves, with auto-gen docs and internal tooling for our pros.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_4","title":"Greg Baugues","text":"<p>Go ahead, Ricky.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_2","title":"Ricky Robinett","text":"<p>Yeah, Andrew, Greg, can I switch our topics a bit?</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_5","title":"Greg Baugues","text":"<p>Please, please.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_3","title":"Ricky Robinett","text":"<p>People who know you well know you\u2019re a great developer educator and a prolific builder. Can you talk about how, as a builder, your relationship with docs has changed regarding AI?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_5","title":"Andrew Baker","text":"<p>It\u2019s been mind-blowing. What we focused on was understanding customers and making every visitor successful. We created feedback loops: ratings, user testing, card-sorting exercises.</p> <p>The past year and a half, I\u2019ve been diving into AI tooling, curious what these tools are good for and what they change. Being a bootstrapper, I like seeing what one person can do. Now the challenge isn\u2019t personally understanding a new API but how much I slow down, leave my IDE, and sign up for something. High-friction signup experiences frustrate me more than before. I just want my API key pasted in my editor so my coding agent can finish the job.</p> <p>I think a lot about getting your docs into your IDE so your agent can access it. Stripe\u2019s built-in doc fetcher is fascinating: you get up-to-date, vendor-approved info, even when ChatGPT doesn\u2019t have your latest API changes.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_4","title":"Ricky Robinett","text":"<p>So are docs no longer for humans, but for LLMs? Are humans using assistants to consume and learn docs?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_6","title":"Andrew Baker","text":"<p>You could see that as a hot take. If I ran a team in 2025, I\u2019d argue the most important audience is IDEs and agents, not developers themselves. But there\u2019s an artistry to docs that help humans learn\u2014ancillary skills, the first time you use an API, etc. That part is worth preserving.</p> <p>For parsing through lots of pages to make one API call, though, the best workflow might be to give agents everything so they can apply it to the developer\u2019s problem.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_5","title":"Ricky Robinett","text":"<p>Let me tie that to something else. We spent a lot on robust templates and sample apps, but they didn\u2019t have the impact we expected. Now I see more folks wanting templates that get them most of the way so their assistant can finish. Do you think templates will have a resurgence?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_7","title":"Andrew Baker","text":"<p>Hot take: I disagree. More devs are comfortable starting from a blank IDE now. Maybe the best agents use prompts to find sample repos for inspiration, but I doubt people go to your docs just to clone a repo. The blank editor might be more important. Still, sample code on GitHub can help LLMs learn the right way to use your API.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_6","title":"Greg Baugues","text":"<p>There\u2019s a dichotomy: Developers consume docs via autocomplete (from old training data, maybe not from official docs), or via retrieval-augmented generation (RAG) using tools like Stripe\u2019s MCP server. Even then, hallucinations are an issue. Any best practices to ensure the \"proper\" approach is in training data?</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_6","title":"Ricky Robinett","text":"<p>Quick Cloudflare answer: try everything. If you miss a training window, you might lose 12\u201318 months. Lots of samples, LLMs.txt and Markdown for LLMs. Haven\u2019t seen RAG work well yet; it\u2019s still manual. Also, docs links for crawling aren\u2019t a silver bullet.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_8","title":"Andrew Baker","text":"<p>It depends. There are two sides: if you\u2019re an incumbent, stable API, LLMs know about you. If you\u2019re a new startup, you have to find ways to get recent context into the dev\u2019s environment.</p> <p>I found Context 7 (from Upstash)\u2014paste in a GitHub repo and it outputs a consolidated, LLM-friendly version (including LLMs.txt). I tried it and got a link for my dev environment. I\u2019ll use it again.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_7","title":"Greg Baugues","text":"<p>That\u2019s great, and they even have an MCP server.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_9","title":"Andrew Baker","text":"<p>I haven\u2019t tried it, but yes.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_8","title":"Greg Baugues","text":"<p>For a standard, stable library, autocomplete works well. For new tools and AI agents, LLMs might not know. The distinction between incumbents and startups is crucial\u2014they have different problems.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_7","title":"Ricky Robinett","text":"<p>In the old days, the best doc signal was being the top Google hit for \"send SMS with PHP.\" Now you want to be the top query result in ChatGPT\u2014with working, copy-pasteable code.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_10","title":"Andrew Baker","text":"<p>Let me pitch my fever dream workflow. Feedback loops were huge for us\u2014the best signal for making API/docs better. What if a dev integrated your MCP server in their IDE, and the agent could retrieve current docs and collect feedback on whether they solved the problem? This is realistic to experiment with.</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_8","title":"Ricky Robinett","text":"<p>Great idea, Baker. I\u2019ve been trying automating tutorial testing with LLMs\u2014not just code sample tests, but whole experience reviews. This is promising self-critiquing for docs/tuts.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_11","title":"Andrew Baker","text":"<p>I agree; maintenance was the most painful part for us. If you could point an LLM at a URL, let it run and critique examples, I\u2019d have paid for that daily on every page.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_9","title":"Greg Baugues","text":"<p>Imagine running Twilio docs in 2015\u201316, but now with LLM API access. Where would you deploy these for maintenance?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_12","title":"Andrew Baker","text":"<p>There are concerns in the technical writing community about LLM-authored docs. I\u2019m more open to it. At Twilio, our philosophy was that sample code was most important\u2014code is the densest information. That\u2019s why we prioritized language support.</p> <p>If you believe code is the most important, I\u2019d use LLMs to get a first draft of the rest of the prose, grounded in truth. I wouldn\u2019t let LLMs produce huge unsupervised outputs, but as a draft to support code? That\u2019s valuable.</p> <p>I\u2019d also go further: point an LLM at the code itself, have it extract endpoints/params, generate sample code, and wrap docs around it. We generated API reference docs from the API's source of truth, which reduced maintenance and increased quality. Today, generating docs from OpenAPI is routine, but for us it was all internal tooling. Imagine letting LLMs generate public docs from real code.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_10","title":"Greg Baugues","text":"<p>Suppose a startup just raised funding and needs to write docs. What product docs inspire you, and what are three top tips?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_13","title":"Andrew Baker","text":"<p>Honestly, I haven\u2019t seen new product docs that truly knock my socks off\u2014it\u2019s hard at a new company where resources are scarce and focus is on agents, not prose. If I started today I\u2019d generate docs from the source of truth, keep code and doc context together, and leverage LLMs\u2019 context windows on small codebases.</p> <p>I\u2019d implement an automated pipeline for OpenAPI docs, keeping context up-to-date, flat, and auto-exposed for LLM/developer consumption. Beyond that: MCP servers. They fill product lifecycle gaps\u2014e.g., Neon\u2019s runs queries live, Sentry\u2019s investigates errors, custom ones let devs manage webhooks/dev tools. No one covers the whole lifecycle yet.</p> <p>I wouldn\u2019t build elaborate user consoles; I\u2019d make signup quick: email, password, API key, and MCP link. Docs would be written more for agents than for direct humans.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_11","title":"Greg Baugues","text":"<p>That feels like a hot take.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_14","title":"Andrew Baker","text":"<p>You warmed me up, Ricky!</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_9","title":"Ricky Robinett","text":"<p>We\u2019ve always valued dashboards visually, but they can become obstacles. I\u2019d rather converse with my data, via MCP and integrations.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_15","title":"Andrew Baker","text":"<p>Exactly. Even at Twilio, with great docs, we didn\u2019t emphasize dashboards enough and it became a problem. Maintaining or using a weird UI isn\u2019t fun\u2014dashboards should be rethought.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_12","title":"Greg Baugues","text":"<p>So the goal wasn\u2019t \"great docs,\" but \"great dev experience.\" Docs were integral, but now agentic-first tooling might matter more\u2014a single Markdown file, curl commands, etc. The best experience may involve not visiting your website at all.</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_16","title":"Andrew Baker","text":"<p>Right, I\u2019ve wondered if you could just have an API endpoint that mints temp accounts/keys for dev IDEs\u2014skipping the website altogether. Could agents register on the user\u2019s behalf? That would be true frictionless onboarding and would let you skip building a marketing site.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_13","title":"Greg Baugues","text":"<p>You almost want services to authenticate with a cursor account. Maybe a step too far, but interesting. Ricky?</p>"},{"location":"interviews/andrew-baker-on-docs/#ricky-robinett_10","title":"Ricky Robinett","text":"<p>I have many thoughts, but it's a wild topic. Andrew, what are you most excited about now, and how can people keep up with you?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_17","title":"Andrew Baker","text":"<p>I\u2019ll speak at DevRelcon in July on this topic, phases of PLG, and how things are changing. You can follow me on LinkedIn\u2014look for Andrew Torque Baker. There are a lot of Andrew Bakers, but only one with the middle name Torque. This is an amazing time to work in DevRel, even after hard years. You get to expand your job description, org charts are flat, jobs are multidisciplinary\u2014DevRel has always lived at that intersection. It\u2019s a great opportunity to combine skills and inspire teams to try new angles.</p>"},{"location":"interviews/andrew-baker-on-docs/#greg-baugues_14","title":"Greg Baugues","text":"<p>How do you see new folks writing first code, via new tools or as non-devs, changing DevRel, docs, and experience?</p>"},{"location":"interviews/andrew-baker-on-docs/#andrew-baker_18","title":"Andrew Baker","text":"<p>That\u2019s inspiring for me. We struggled to name that persona\u2014maybe \"builder\" fits best. Someone building something from nothing, though they might not identify as an engineer. Twilio\u2019s simplicity and magical results let us meet folks starting out in software, changing how they viewed work, careers, possibilities.</p> <p>What\u2019s interesting is the new motivations builders may bring. A few years ago, the wisdom was: find a tiny niche, keep it manageable, marketable. Big projects required VC, limited your options, dictated by investors. Now, maybe a tiny team can ship world-class software with little capital. If you once needed 100 people, maybe now you can do it with 3, 5, or 10. With the right group, different motivations (not just maximizing returns) could drive hard work and creative outcomes. That\u2019s my fever dream for now: a new way for small groups to build what was out of reach before.</p>"},{"location":"interviews/questions-for-baker/","title":"Questions for baker","text":""},{"location":"interviews/questions-for-baker/#hello-andrew","title":"Hello Andrew!","text":"<p>Updated: 2025-04-29 20:12</p> <p>(this is a public but unlinked page. though the repo is public.)</p> <p>Hello sir! Stoked to chat next week about this stuff. </p> <p>Broadly, I'd love to chat with you about docs + AI. </p> <p>I'll also ask Ricky if he wants to join. </p>"},{"location":"interviews/questions-for-baker/#what-is-devrelai","title":"What is devrel.ai?","text":"<p>To the extent that I have a plan for devrel.ai, it goes something like this: </p> <ol> <li>Poise of questions about where devrel is headed given AI </li> <li>Use it as fodder to talk shop with friends and smart people </li> <li>Post the result of those conversations to devrel.ai in some capacity: </li> </ol> <p>3 will be at minimum an article that distills and/or incorporates the things we talked about (with your attribution. Though I could see a cleaned up transcript, and maybe youtube? I dunno. It seems kind of dumb to have these conversations and not take the extra two steps to make it a podcast. </p> <p>But at minimum I want a page at devrel.ai/docs that has some strong advice/opinions from Andrew Baker with some sprinkles of my own ideas. </p>"},{"location":"interviews/questions-for-baker/#what-should-we-talk-about","title":"What should we talk about?","text":"<p>I'm generally down to talk about anything you're excited/interested in, but for the sake of structure, here's where I'd start... </p> <p>You ran docs at Twilio for a long time. There are few companies known for better docs, and few devtool companies that have more doc complexity. </p> <p>A format that I've found so to work for me when writing about devrel + AI is: </p> <ol> <li>What's the old devrel playbook for {tactic}? </li> <li>What's happening in AI that affects {tactic}? </li> <li>What's the new devrel playbook for {tactic} + AI? </li> </ol> <p>So here's how I'd propose structuring our conversation: </p>"},{"location":"interviews/questions-for-baker/#whats-the-old-playbook-for-docs","title":"What's the old playbook for docs?","text":"<ul> <li>What makes for great docs? </li> <li>What are some of the technical challenges of maintaining docs? <ol> <li>How do you pick a docs stack? </li> <li>\"docs as a product\" </li> <li>? </li> </ol> </li> <li>How do you measure good docs? </li> <li>How do you keep the docs in sync with the product? </li> <li>What are some of the people challenges of owning the docs? </li> </ul>"},{"location":"interviews/questions-for-baker/#what-are-you-seeing-in-ai-today-that-affects-docs","title":"What are you seeing in AI today that affects Docs?","text":""},{"location":"interviews/questions-for-baker/#questions-about-docs-ai","title":"Questions about Docs + AI","text":"<ul> <li> <p>Should your docs be primarily markdown-based? </p> </li> <li> <p>How do you structure docs to optimize for RAG over docs in the IDE? </p> </li> <li> <p>Is it a failure case to have a developer look at documentation at all?</p> </li> </ul>"},{"location":"people/","title":"People","text":"<p>Andrew Baker</p> <p>Ricky Robinett</p> <p>Greg Baugues</p>"},{"location":"people/andrew-baker/","title":"Andrew Baker","text":"<p>Andrew Tork Baker is a solofounder based in SF. </p> <p>Andrew served as VP of Developer Relations at Twilio from 2022-2023. </p> <p>Before that, he led Twilio's Developer Education team, which was responsible for docs and training. </p> <p></p>"},{"location":"people/greg-baugues/","title":"Greg Baugues","text":"<p>Hi! I'm Greg. I made this site. </p> <p>I spend most of my time building with AI, creating YouTube videos, and advising AI companies on devrel. </p> <p>I did DevRel at Twilio for nine years. During my time I led the Enterprise Evangelism and Developer Community teams. </p> <p>I live in Lower Hudson Valley, about 20 miles north of Manhattan. I'm super into photography and magic. </p> <p></p>"},{"location":"people/ricky-robinett/","title":"Ricky Robinett","text":"<p>Ricky is VP of Developer Relations at Cloudflare. </p> <p>Before that, he served as VP of Developer Relations at Twilio. </p> <p>Ricky lives in Brooklyn and loves magic. </p> <p></p>"}]}